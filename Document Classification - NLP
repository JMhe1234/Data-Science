{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":7185424,"sourceType":"datasetVersion","datasetId":4153864}],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/jamalmiah/csc-30051-cw-nlp?scriptVersionId=159312165\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"!pip install tokenization","metadata":{"execution":{"iopub.status.busy":"2024-01-17T11:29:49.390249Z","iopub.execute_input":"2024-01-17T11:29:49.390684Z","iopub.status.idle":"2024-01-17T11:30:03.841062Z","shell.execute_reply.started":"2024-01-17T11:29:49.390652Z","shell.execute_reply":"2024-01-17T11:30:03.839699Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!pip install keras","metadata":{"execution":{"iopub.status.busy":"2024-01-17T11:31:08.867948Z","iopub.execute_input":"2024-01-17T11:31:08.868414Z","iopub.status.idle":"2024-01-17T11:31:23.056738Z","shell.execute_reply.started":"2024-01-17T11:31:08.868381Z","shell.execute_reply":"2024-01-17T11:31:23.055625Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport tokenization\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom keras.utils import to_categorical","metadata":{"execution":{"iopub.status.busy":"2024-01-17T11:31:30.667006Z","iopub.execute_input":"2024-01-17T11:31:30.66741Z","iopub.status.idle":"2024-01-17T11:31:46.580626Z","shell.execute_reply.started":"2024-01-17T11:31:30.667379Z","shell.execute_reply":"2024-01-17T11:31:46.579305Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from nltk.corpus import stopwords\nimport nltk\n\nstop_words = stopwords.words('english')\nps = nltk.stem.PorterStemmer()\n\ndef preprocess(document):\n    \n    #Parsing, to allow the extaraction of data so it can be used\n    with open(document, 'r') as file:\n        content = file.read()\n    \n    # Tokenization\n    tokens = nltk.word_tokenize(content)\n\n    # Remove punctuation and convert to lowercase\n    tokens_pun_lower = [w.lower() for w in tokens if w.isalnum()]\n\n    # Remove stop words\n    tokens_stop = [w for w in tokens_pun_lower if w not in stop_words]\n\n    # Stemming\n    terms = [ps.stem(w) for w in tokens_stop]\n    \n    #turn into string again\n    return \" \".join(terms)","metadata":{"execution":{"iopub.status.busy":"2024-01-17T11:32:03.874629Z","iopub.execute_input":"2024-01-17T11:32:03.875388Z","iopub.status.idle":"2024-01-17T11:32:04.425694Z","shell.execute_reply.started":"2024-01-17T11:32:03.875347Z","shell.execute_reply":"2024-01-17T11:32:04.424451Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os\nData = []\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        #print(os.path.join(dirname, filename))\n        \n        doc_type = filename.split('_')[0].lower()\n        content = preprocess(os.path.join(dirname, filename))\n        \n        Data.append([content, doc_type])\n\nnews = pd.DataFrame (Data, columns = ['Contents', 'Type'])\nnews","metadata":{"execution":{"iopub.status.busy":"2024-01-17T11:32:30.318185Z","iopub.execute_input":"2024-01-17T11:32:30.31864Z","iopub.status.idle":"2024-01-17T11:32:36.218544Z","shell.execute_reply.started":"2024-01-17T11:32:30.318604Z","shell.execute_reply":"2024-01-17T11:32:36.217076Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#to show the types of documents, without .unique it would display all 300 types, this only shows the type once regardles of its actual count. \nclassesList = news['Type'].unique()\nclassesList","metadata":{"execution":{"iopub.status.busy":"2024-01-17T11:32:45.967117Z","iopub.execute_input":"2024-01-17T11:32:45.967574Z","iopub.status.idle":"2024-01-17T11:32:45.982589Z","shell.execute_reply.started":"2024-01-17T11:32:45.967541Z","shell.execute_reply":"2024-01-17T11:32:45.981077Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#one hot encoding to allow machine learning to occur\nnews['Type'] = pd.factorize(news['Type'])[0]\nnews","metadata":{"execution":{"iopub.status.busy":"2024-01-17T11:32:49.95088Z","iopub.execute_input":"2024-01-17T11:32:49.951421Z","iopub.status.idle":"2024-01-17T11:32:49.972032Z","shell.execute_reply.started":"2024-01-17T11:32:49.951385Z","shell.execute_reply":"2024-01-17T11:32:49.970616Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X = news['Contents']\ny = news['Type']","metadata":{"execution":{"iopub.status.busy":"2024-01-17T11:32:53.024474Z","iopub.execute_input":"2024-01-17T11:32:53.02552Z","iopub.status.idle":"2024-01-17T11:32:53.031473Z","shell.execute_reply.started":"2024-01-17T11:32:53.025368Z","shell.execute_reply":"2024-01-17T11:32:53.030241Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = .25, random_state = 42)","metadata":{"execution":{"iopub.status.busy":"2024-01-17T11:32:56.98747Z","iopub.execute_input":"2024-01-17T11:32:56.988046Z","iopub.status.idle":"2024-01-17T11:32:56.998357Z","shell.execute_reply.started":"2024-01-17T11:32:56.987998Z","shell.execute_reply":"2024-01-17T11:32:56.997238Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#TF-IDF vectorizer to convert text data to numerical to allow machine learning\nvector = TfidfVectorizer()","metadata":{"execution":{"iopub.status.busy":"2024-01-17T11:32:59.697722Z","iopub.execute_input":"2024-01-17T11:32:59.69866Z","iopub.status.idle":"2024-01-17T11:32:59.704723Z","shell.execute_reply.started":"2024-01-17T11:32:59.698612Z","shell.execute_reply":"2024-01-17T11:32:59.703243Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#fit and transform\nX_train_vec = vector.fit_transform(X_train)","metadata":{"execution":{"iopub.status.busy":"2024-01-17T11:33:03.178727Z","iopub.execute_input":"2024-01-17T11:33:03.179192Z","iopub.status.idle":"2024-01-17T11:33:03.281585Z","shell.execute_reply.started":"2024-01-17T11:33:03.179155Z","shell.execute_reply":"2024-01-17T11:33:03.280456Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#transform\nX_test_vec = vector.transform(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-01-17T11:33:06.536038Z","iopub.execute_input":"2024-01-17T11:33:06.536441Z","iopub.status.idle":"2024-01-17T11:33:06.560202Z","shell.execute_reply.started":"2024-01-17T11:33:06.53641Z","shell.execute_reply":"2024-01-17T11:33:06.558678Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df = DecisionTreeClassifier(random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-01-17T11:33:09.260707Z","iopub.execute_input":"2024-01-17T11:33:09.261165Z","iopub.status.idle":"2024-01-17T11:33:09.266628Z","shell.execute_reply.started":"2024-01-17T11:33:09.261132Z","shell.execute_reply":"2024-01-17T11:33:09.265356Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#train\ndf.fit(X_train_vec, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-01-17T11:33:12.102824Z","iopub.execute_input":"2024-01-17T11:33:12.103217Z","iopub.status.idle":"2024-01-17T11:33:12.146823Z","shell.execute_reply.started":"2024-01-17T11:33:12.103178Z","shell.execute_reply":"2024-01-17T11:33:12.145496Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#predict\ny_pred = df.predict(X_test_vec)","metadata":{"execution":{"iopub.status.busy":"2024-01-17T11:33:14.593073Z","iopub.execute_input":"2024-01-17T11:33:14.593473Z","iopub.status.idle":"2024-01-17T11:33:14.601667Z","shell.execute_reply.started":"2024-01-17T11:33:14.59344Z","shell.execute_reply":"2024-01-17T11:33:14.600079Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#evaluation\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"Accuracy: {accuracy}\")","metadata":{"execution":{"iopub.status.busy":"2024-01-17T11:33:18.670135Z","iopub.execute_input":"2024-01-17T11:33:18.670595Z","iopub.status.idle":"2024-01-17T11:33:18.678882Z","shell.execute_reply.started":"2024-01-17T11:33:18.670564Z","shell.execute_reply":"2024-01-17T11:33:18.677456Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#evaluation\nfrom sklearn.metrics import mean_squared_error\nmse = mean_squared_error(y_test,y_pred)\nprint(f\"Mean Sqaured Error: {mse}\")","metadata":{"execution":{"iopub.status.busy":"2024-01-17T11:33:21.050297Z","iopub.execute_input":"2024-01-17T11:33:21.050748Z","iopub.status.idle":"2024-01-17T11:33:21.059291Z","shell.execute_reply.started":"2024-01-17T11:33:21.050711Z","shell.execute_reply":"2024-01-17T11:33:21.057961Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#classification\nprint(classification_report(y_test, y_pred))","metadata":{"execution":{"iopub.status.busy":"2024-01-17T11:33:24.242735Z","iopub.execute_input":"2024-01-17T11:33:24.24324Z","iopub.status.idle":"2024-01-17T11:33:24.25988Z","shell.execute_reply.started":"2024-01-17T11:33:24.243202Z","shell.execute_reply":"2024-01-17T11:33:24.258668Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#viz on how it reaches its decision\nfrom sklearn.tree import plot_tree\n\n# Plot decision tree\nplt.figure(figsize=(15, 10))\nplot_tree(df, filled=True, feature_names=None, class_names=classesList)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-01-17T11:33:27.681772Z","iopub.execute_input":"2024-01-17T11:33:27.682189Z","iopub.status.idle":"2024-01-17T11:33:29.435903Z","shell.execute_reply.started":"2024-01-17T11:33:27.682148Z","shell.execute_reply":"2024-01-17T11:33:29.434826Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"stop_words_2 = set(stopwords.words('english'))\nps_2 = nltk.stem.PorterStemmer()\n\ndef preprocess_real_data(raw_data):\n    # Assuming if string\n    \n    # Tokenization\n    tokens_2 = nltk.word_tokenize(raw_data)\n\n    # Remove punctuation and convert to lowercase\n    tokens_pun_lower_2 = [w.lower() for w in tokens_2 if w.isalnum()]\n\n    # Remove stop words\n    tokens_stop_2 = [w for w in tokens_pun_lower_2 if w not in stop_words]\n\n    # Stemming\n    terms_2 = [ps_2.stem(w) for w in tokens_stop_2]\n    \n    # Turn into string again\n    processed_data = \" \".join(terms_2)\n    \n    return processed_data","metadata":{"execution":{"iopub.status.busy":"2024-01-17T11:33:44.186496Z","iopub.execute_input":"2024-01-17T11:33:44.186945Z","iopub.status.idle":"2024-01-17T11:33:44.195106Z","shell.execute_reply.started":"2024-01-17T11:33:44.186909Z","shell.execute_reply":"2024-01-17T11:33:44.194221Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#using real world data to test the algorithm to see it predict\nraw_real = \"\"\"There is no denying the fact that stress can have a profound effect on a person’s overall health. According to the State of the Global Workplace 2023 Report, about 44% of workers around the globe say they experience a lot of stress.\n\nPrevious research shows that ongoing stress can lead to high blood pressureTrusted Source and an increase in cardiovascular events. It can also negatively impact the immune systemTrusted Source, affect metabolic healthTrusted Source, and impact sleep qualityTrusted Source.\n\nBecause stress can be so damaging to our bodies, it is no wonder why people look for different ways to alleviate it.\n\nOne method many people on social media platforms are using and promoting is taking supplements of the herb ashwagandha.\n\nCalled “glizzy pills,” influencers using the hashtag #ashwagandha are reporting benefits including boosted testosterone, increased libido, improved brain function, and feeling so happy, confident, and stress-free that they can better deal with unhappy events like a break-up or removing toxic people from their lives.\n\nCould these claims be true or are they misleading? Are there potential risks of taking ashwagandha that people need to know about? And are there other ways people can relieve stress without taking a supplement?\n\nMedical News Today spoke with seven medical experts to get the answers to these questions and find out the truth behind social media’s ashwagandha claims.\"\"\"\n\n\nreal_world_data = preprocess_real_data(raw_real)\n\n# Use the same vectorizer to transform the real-world data\nX_real_world = vector.transform([real_world_data])\n\n# Make predictions\npredictions = df.predict(X_real_world)\n\n# Find the index of the maximum value in the predictions array\nresult = np.argmax(predictions)\n\n# Map the index to the corresponding type label\ndict1 = {0: \"Medical\", 1: \"Food\", 2: \"Business\"}\npredicted_type = dict1[result]\n\nprint(f\"The type is: {predicted_type}\")","metadata":{"execution":{"iopub.status.busy":"2024-01-17T11:33:50.290907Z","iopub.execute_input":"2024-01-17T11:33:50.291423Z","iopub.status.idle":"2024-01-17T11:33:50.317036Z","shell.execute_reply.started":"2024-01-17T11:33:50.291389Z","shell.execute_reply":"2024-01-17T11:33:50.315381Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#using LIME for XAI\nfrom sklearn.pipeline import make_pipeline\nfrom lime.lime_text import LimeTextExplainer","metadata":{"execution":{"iopub.status.busy":"2024-01-17T11:33:53.869403Z","iopub.execute_input":"2024-01-17T11:33:53.869841Z","iopub.status.idle":"2024-01-17T11:33:53.888519Z","shell.execute_reply.started":"2024-01-17T11:33:53.869792Z","shell.execute_reply":"2024-01-17T11:33:53.887262Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"pipeline = make_pipeline(vector, df)\nclass_names = ['Medical', 'Food', 'Business']\nexplainer = LimeTextExplainer(class_names=class_names)","metadata":{"execution":{"iopub.status.busy":"2024-01-17T11:33:56.762401Z","iopub.execute_input":"2024-01-17T11:33:56.762874Z","iopub.status.idle":"2024-01-17T11:33:56.768692Z","shell.execute_reply.started":"2024-01-17T11:33:56.762836Z","shell.execute_reply":"2024-01-17T11:33:56.767823Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#showing what words makes it predicat the type\nind = 6\ntext = X_test[ind]\nprint(text)\n\nexp = explainer.explain_instance(text, pipeline.predict_proba, num_features=6)\nexp.show_in_notebook(text=True)","metadata":{"execution":{"iopub.status.busy":"2024-01-17T11:33:59.468581Z","iopub.execute_input":"2024-01-17T11:33:59.468968Z","iopub.status.idle":"2024-01-17T11:34:01.912511Z","shell.execute_reply.started":"2024-01-17T11:33:59.468938Z","shell.execute_reply":"2024-01-17T11:34:01.911193Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#showing what words makes it predicat the type\nind = 295\ntext = X_test[ind]\nprint(text)\n\nexp = explainer.explain_instance(text, pipeline.predict_proba, num_features=6)\nexp.show_in_notebook(text=True)","metadata":{"execution":{"iopub.status.busy":"2024-01-17T11:34:08.042825Z","iopub.execute_input":"2024-01-17T11:34:08.043311Z","iopub.status.idle":"2024-01-17T11:34:13.436149Z","shell.execute_reply.started":"2024-01-17T11:34:08.043271Z","shell.execute_reply":"2024-01-17T11:34:13.434465Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#showing what words makes it predicat the type\nind = 148\ntext = X_test[ind]\nprint(text)\n\nexp = explainer.explain_instance(text, pipeline.predict_proba, num_features=6)\nexp.show_in_notebook(text=True)","metadata":{"execution":{"iopub.status.busy":"2024-01-17T11:34:18.611552Z","iopub.execute_input":"2024-01-17T11:34:18.611968Z","iopub.status.idle":"2024-01-17T11:34:20.827408Z","shell.execute_reply.started":"2024-01-17T11:34:18.611936Z","shell.execute_reply":"2024-01-17T11:34:20.825907Z"},"trusted":true},"outputs":[],"execution_count":null}]}